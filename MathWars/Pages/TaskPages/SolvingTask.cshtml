@page
@model MathWars.Pages.TaskPages.SolvingTaskModel
@{
}

<link rel="stylesheet" href="~/css/SolvingTask.css" asp-append-version="true" />

@{
    <script type="text/javascript">
        $(function () {
            $("#aModal").modal('show');
        })
    </script>
}

@*modal*@
@if (Model.ShowModal == true)
{
    <div class="modal fade" id="aModal" tabindex="-1" role="dialog" aria-labelledby="aModalLabel"
    aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                @if (Model.IsSolved)
                {
                    <div class="modal-header">
                        <h4 class="modal-title" id="aModalLabel">Gratulacje</h4>
                    </div>
                    <div class="modal-body">
                        <div>
                            <h4>Udało Ci się poprawnie rozwiązać zadanie :)</h4>
                            @if(Model.NumberOfAttempts > 0)
                            {
                                <h6>Z racji że podjąłeś już wcześniej próbę rozwiązania tego zadania, nie dostałeś exp</h6>
                            }
                        </div>
                        <div>
                            <h4>Twoje aktualne statystyki:</h4>
                            <p>Poziom: @Model.UserStatsModel.Level</p>
                            <p>Exp: @Model.UserStatsModel.Exp/@Model.UserStatsModel.ExpToReachNewLvl</p>
                            <br/>
                            <form asp-page-handler="RateTask">
                                <input asp-for="ShowModal" type="hidden" />
                                <input asp-for="IsSolved" type="hidden" />
                                <input asp-for="NumberOfAttempts" type="hidden" />
                                <input asp-for="TaskSolvingModel.Id" type="hidden" />
                               
                                @if (Model.HasUserGivenStar)
                                {
                                    <h4>Miło nam, że spodobało Ci się to zadanie</h4>
                                    <button class="btn-primary" type="submit"><i class="bi bi-star-fill"></i></button>
                                }
                                else
                                {
                                    <h4>Jeżeli podobało Ci się to zadanie, możesz dać gwiazdkę</h4>
                                    <button class="btn-primary" type="submit"><i class="bi bi-star"></i></button>
                                }
                                
                            </form>
                        </div>
                    </div>
                }
                else if (Model.Error)
                {
                    <div class="modal-header">
                        <h4 class="modal-title" id="aModalLabel">Błąd</h4>
                    </div>
                    <div class="modal-body">
                        <span asp-validation-for="TaskSolvingModel.AnswersToTask" class="text-danger"></span>
                    </div>
                }
                else
                {
                    <div class="modal-header">
                        <h4 class="modal-title" id="aModalLabel">Porażka</h4>
                    </div>
                    <div class="modal-body">
                        Niestety nie udało Ci się poprawnie rozwiązać zadanie : (
                    </div>
                }
                
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

 <div class="level-display">
    <div class="solving-task-container">
    <h2>Rozwiąż zadanie</h2>
    <div class="bug-report">
        <a asp-page="/Reports/ReportBugInTask" asp-route-id="@Model.TaskSolvingModel.Id" class="btn btn-secondary" style="width:50px;"><i class="bi bi-bug"></i></a>
    </div>
  
    <div class="task-content">

        <div class="task-text">
            <p> @Model.TaskSolvingModel.Content</p>
        </div>
            @{
                if (!string.IsNullOrEmpty(Model.TaskSolvingModel.ImageUrl))
                {
                    <div  class="task-img">
                        <img src="@Url.Content(Model.TaskSolvingModel.ImageUrl)" alt="Optional Image for Task"/>
                    </div>
                }
            }
    </div>
   
        <div class="whiteboard-container">
            <section class="tools-board">
                <div class="row">
                    <label class="title">Figury</label>
                    <ul class="options">
                        <li class="option tool" id="rectangle">
                            <img src="~/images/icons/rectangle.svg" alt="prostokąt">
                            <span>Prostokąt</span>
                        </li>
                        <li class="option tool" id="circle">
                            <img src="~/images/icons/circle.svg" alt="okrąg">
                            <span>Okrąg</span>
                        </li>
                        <li class="option tool" id="triangle">
                            <img src="~/images/icons/triangle.svg" alt="trójkąt">
                            <span>Trójkąt</span>
                        </li>
                        <li class="option">
                            <input type="checkbox" id="fill-color" />
                            <label for="fill-color">Pokoloruj</label>
                        </li>
                    </ul>
                </div>
                <div class="row">
                    <label class="title">Opcje</label>
                    <ul class="options">
                        <li class="option active tool" id="brush">
                            <img src="~/images/icons/brush.svg" alt="pędzel">
                            <span>Pędzel</span>
                        </li>
                        <li class="option tool" id="eraser">
                            <img src="~/images/icons/eraser.svg" alt="gumka">
                            <span>Gumka</span>
                        </li>
                        <li class="option">
                            <input type="range" id="size-slider" min="1" max="50" value="5" step="1" />
                        </li>
                    </ul>
                </div>
                <div class="row colors">
                    <label class="title">Kolory</label>
                    <ul class="options">
                        <li class="option"></li>
                        <li class="option selected"></li>
                        <li class="option"></li>
                        <li class="option"></li>
                        <li class="option">
                            <input type="color" id="color-picker" value="#4A98F7" />
                        </li>
                    </ul>
                </div>
                <div class="row buttons">
                    <button class="clear-canvas">Clear Canvas</button>
                    <button class="save-img">Save As Image</button>
                </div>
            </section>
            <section class="drawing-board">
                <canvas id="gridCanvas"></canvas>
                <canvas id="mathCanvas"></canvas>
            </section>
        </div>

    <div class="answers">
        <form method="post">
            <input type="hidden" asp-for="@Model.TaskSolvingModel.Id" />
            @* <div asp-validation-summary="All" class="text-danger"></div> *@
            
            @{
                if (Model.TaskSolvingModel.NumberOfCorrectAnswers > 1){
                    <label asp-for="TaskSolvingModel.NumberOfCorrectAnswers">Zaznacz
                        @Model.TaskSolvingModel.NumberOfCorrectAnswers poprawne odpowiedzi: </label>
                }
                else{
                    <label asp-for="TaskSolvingModel.NumberOfCorrectAnswers">Zaznacz jedną poprawna odpowiedź: </label>
                }
                    <br/>
                int numberOfCharInASCII = 65;
                for (int i = 0; i < Model.TaskSolvingModel.AnswersToTask.Count; i++)
                {
                    char letter = Convert.ToChar(numberOfCharInASCII);

                    <input type="checkbox" 
                        value="@Model.TaskSolvingModel.AnswersToTask[i].id" 
                        name="SelectedAnswersIds" />
                    <label asp-for="TaskSolvingModel.AnswersToTask[i]">@letter) @Model.TaskSolvingModel.AnswersToTask[i].Content</label>
                    
                    <br/>
                    numberOfCharInASCII++;
                }
            }

                <button type="submit">Sprawdź</button>
				<button><a asp-page="/Index">Powrót do strony głównej</a></button>
        
        </form>
        </div>
   </div>

    <div class="sidebar-right">
    <div class="math-translator-table">
        <div class="first-block">
            <div class="slider">
                <div class="slider-wrapper">
                    @for (int i = 1; i <= 34; i++)
                    {
                        <div class="slider-item">
                            <div class="zoom-container">
                                <img src="~/images/tablice-matematyczne/@($"{i}.png")" alt="Image @i">
                            </div>
                        </div>
                    }
                </div>
                <button class="slider-button prev" onclick="moveSlide(-1)">&#10094;</button>
                <button class="slider-button next" onclick="moveSlide(1)">&#10095;</button>
            </div>
        </div>

        <div class="task-info">
            <div>
                @if (Model.NumberOfAttempts >= 1)
                {
                    <p> <i class="fas fa-info"></i> Podjąłeś już próbę rozwiązania tego zadania, dlatego za następne próby nie dostaniesz exp</p>
                }
                else
                {
                    <p> <i class="fas fa-info"></i> Skup się masz jedno podejść żeby dostać exp za to zadania</p>
                }
            </div>
        </div>
        <div class="pop-up-button">
                <button onclick="openForm()">Podpowiedź do zadania</button>
        </div>
    </div>
    </div>
</div>
<script src="~/js/Drawing.js"></script>


<!-- Button to open the chat form -->


<!-- The chat popup -->
<div class="chat-popup" id="myForm">
    <form asp-page-handler="Chat" asp-route-taskId="@Model.TaskSolvingModel.Id" class="form-container">
        @if (string.IsNullOrEmpty(Model.Response))
        {
            <p align="center">Czy napewno chcesz skorzystać z podpowiedzi?</p>
            <button type="submit" class="btn">Chcę podpowiedź</button>
            <button type="button" class="btn cancel" onclick="closeForm()">Spróbuje bez podpowiedzi</button>
        }

        <input type="hidden" name="Prompt" value="Nie podawaj mi gotowego rozwiązania, tylko daj mi małą podpowiedź, taką, która mnie tylko nakieruje do tego jak rozwiązać zadanie: @Model.TaskSolvingModel.Content. Nie zadawaj żadnych pytań, nie wchodź w interakcje, interesuje mnie tylko podpowiedź." />

        @if (!string.IsNullOrEmpty(Model.Response))
        {
            <div class="mt-4">
                <h4>Podpowiedź:</h4>
                <p>@Model.Response</p>
                <button type="button" class="btn cancel" onclick="closeForm()">Zamknij</button>
            </div>
        }

        
    </form>
</div>


<script src="~/js/whiteboard.js"></script>
<script src="~/js/gridboard.js"></script>

<script>
    function openForm() {
        document.getElementById("myForm").style.display = "block";
    }

    function closeForm() {
        document.getElementById("myForm").style.display = "none";
    }
</script>

<script>
    function openForm() {
        document.getElementById("myForm").style.display = "block";
    }

    function closeForm() {
        document.getElementById("myForm").style.display = "none";
    }

    let currentSlide = 0;

    function showSlide(index) {
        const slides = document.querySelectorAll('.slider-item');
        if (index >= slides.length) {
            currentSlide = 0;
        } else if (index < 0) {
            currentSlide = slides.length - 1;
        } else {
            currentSlide = index;
        }
        const offset = -currentSlide * 100;
        document.querySelector('.slider-wrapper').style.transform = `translateX(${offset}%)`;
    }

    function moveSlide(step) {
        showSlide(currentSlide + step);
    }

    // Initialize the slider
    showSlide(currentSlide);

    // Add zoom effect
    document.addEventListener("DOMContentLoaded", function () {
        const images = document.querySelectorAll('.slider-item img');

        images.forEach(img => {
            const container = img.closest('.zoom-container');
            container.addEventListener('mousemove', function (event) {
                const rect = container.getBoundingClientRect();
                const x = event.clientX - rect.left;
                const y = event.clientY - rect.top;
                const xPercent = x / rect.width * 100;
                const yPercent = y / rect.height * 100;

                img.style.transformOrigin = `${xPercent}% ${yPercent}%`;
            });

            img.addEventListener('mouseenter', function () {
                img.classList.add('zoom');
            });

            img.addEventListener('mouseleave', function () {
                img.classList.remove('zoom');
            });
        });
    });
</script>